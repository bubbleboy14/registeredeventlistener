from .errors import AbortBranch as AbortBranch
from .listener import Event as Event, Signal as Signal, SocketIO as SocketIO, Timer as Timer, contains as contains
from _typeshed import Incomplete

LISTEN_KQUEUE: int
LISTEN_SELECT: int
LISTEN_POLL: int
SLEEP_SEC: float
SLEEP_TURBO: float
SEL_MAX_FD: int

def set_sleep(s) -> None: ...
def set_turbo(s) -> None: ...
def kbint(signals): ...

class Registrar:
    events: Incomplete
    timers: Incomplete
    addlist: Incomplete
    rmlist: Incomplete
    signals: Incomplete
    tick: int
    run_dispatch: bool
    error_check: bool
    def __init__(self) -> None: ...
    def report(self): ...
    def signal_add(self, sig) -> None: ...
    def signal_remove(self, sig) -> None: ...
    def init(self) -> None: ...
    def event(self, callback, arg, evtype, handle): ...
    def read(self, sock, cb, *args): ...
    def write(self, sock, cb, *args): ...
    def dispatch(self) -> None: ...
    def loop(self): ...
    def abort(self) -> None: ...
    def abort_branch(self) -> None: ...
    def signal(self, sig, cb, *args): ...
    def timeout(self, delay, cb, *args): ...
    def add_timer(self, timer) -> None: ...
    def remove_timer(self, timer) -> None: ...
    def check_timers(self): ...
    def callback(self, etype, fd) -> None: ...
    def handle_error(self, fd) -> None: ...

class KqueueRegistrar(Registrar):
    kq: Incomplete
    kqf: Incomplete
    def __init__(self) -> None: ...
    def abort(self) -> None: ...
    def add(self, event) -> None: ...
    def remove(self, event) -> None: ...
    def check_events(self): ...

class SelectRegistrar(Registrar):
    def __init__(self) -> None: ...
    def add(self, event) -> None: ...
    def remove(self, event) -> None: ...
    def do_check(self, rlist, wlist): ...
    def check_events(self): ...

class PollRegistrar(Registrar):
    poll: Incomplete
    def __init__(self) -> None: ...
    def add(self, event) -> None: ...
    def remove(self, event) -> None: ...
    def check_events(self): ...
    def register(self, fd) -> None: ...

class EpollRegistrar(PollRegistrar):
    poll: Incomplete
    def __init__(self) -> None: ...
